{"version":3,"sources":["WinnerMessage.js","StartMenu.js","GameBody.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","currentScore","highScore","children","StartMenu","options","label","value","onChange","this","setGameDimension","React","Component","GameBody","state","gameData","initialGameData","gameFinished","gameStarted","gameDimension","onItemClick","bind","makeMove","changeCoordinates","isGameFinished","row","cellIndex","rowIndex","indexOf","selectedDimension","initialArray","i","Math","pow","shift","push","setState","_","sort","random","reduce","rows","key","index","length","spaceRow","spaceCell","targetRow","targetCell","currentState","a","b","concat","initialState","every","map","cell","onClick","prevProps","prevState","renderGameData","WinnerMessage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d07edf5b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <header className=\"container-fluid fixed-top\" >\r\n            <div className=\"row\">\r\n                <h1 className=\"col-sm-8\">Celebrity Memory Game</h1>\r\n                <nav className=\"col-sm-4\">\r\n                    <p>Score: <span>{props.currentScore}</span></p>\r\n                    <p>Top Score: <span>{props.highScore}</span> </p>\r\n                    {props.children}\r\n                </nav>\r\n            </div>\r\n        </header>        \r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nclass StartMenu extends React.Component {\r\n  render() {\r\n    const gameDimensions = [\r\n      {\r\n        label: \"three\",\r\n        value: \"3\"\r\n      },\r\n      {\r\n        label: \"four\",\r\n        value: \"4\"\r\n      },\r\n      {\r\n        label: \"five\",\r\n        value: \"5\"\r\n      },\r\n      {\r\n        label: \"six\",\r\n        value: \"6\"\r\n      }\r\n    ];\r\n\r\n    return (\r\n      <div>\r\n        <label className={\"dimension-label\"}>Choose game dimension</label>\r\n        <br />\r\n        <Select\r\n          options={gameDimensions}\r\n          onChange={this.props.setGameDimension}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StartMenu;","import React from \"react\";\r\nimport WinnerMessage from \"./WinnerMessage\";\r\nimport StartMenu from \"./StartMenu\";\r\n\r\nclass GameBody extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      gameData: [],\r\n      initialGameData: [],\r\n      gameFinished: false,\r\n      gameStarted: false,\r\n      gameDimension: 0\r\n    };\r\n\r\n    this.onItemClick = this.onItemClick.bind(this);\r\n    this.makeMove = this.makeMove.bind(this);\r\n    this.changeCoordinates = this.changeCoordinates.bind(this);\r\n    this.isGameFinished = this.isGameFinished.bind(this);\r\n    this.setGameDimension = this.setGameDimension.bind(this);\r\n  }\r\n\r\n  onItemClick(row, cellIndex) {\r\n    const rowIndex = this.state.gameData.indexOf(row);\r\n    this.makeMove(cellIndex, rowIndex);\r\n  }\r\n\r\n  setGameDimension(selectedDimension) {\r\n    let initialArray = [];\r\n    for (let i = 0; i < Math.pow(selectedDimension.value, 2); i++) {\r\n      initialArray[i] = i;\r\n    }\r\n    //delete 0 from the beggining and add to the end\r\n    initialArray.shift();\r\n    initialArray.push(0);\r\n    this.setState(_ => ({\r\n      gameStarted: true,\r\n      gameDimension: selectedDimension.value,\r\n      initialGameData: [...initialArray],\r\n      gameData: initialArray\r\n        .sort(() => Math.random() - 0.5)\r\n        .reduce(\r\n          (rows, key, index) =>\r\n            (index % selectedDimension.value === 0\r\n              ? rows.push([key])\r\n              : rows[rows.length - 1].push(key)) && rows,\r\n          []\r\n        )\r\n    }));\r\n  }\r\n\r\n  makeMove(cellIndex, rowIndex) {\r\n    if (cellIndex > 0 && this.state.gameData[rowIndex][cellIndex - 1] === 0) {\r\n      this.changeCoordinates(rowIndex, cellIndex - 1, rowIndex, cellIndex);\r\n    } else if (\r\n      rowIndex < this.state.gameData.length - 1 &&\r\n      this.state.gameData[rowIndex + 1][cellIndex] === 0\r\n    ) {\r\n      this.changeCoordinates(rowIndex + 1, cellIndex, rowIndex, cellIndex);\r\n    } else if (\r\n      cellIndex < this.state.gameData.length - 1 &&\r\n      this.state.gameData[rowIndex][cellIndex + 1] === 0\r\n    ) {\r\n      this.changeCoordinates(rowIndex, cellIndex + 1, rowIndex, cellIndex);\r\n    } else if (\r\n      rowIndex > 0 &&\r\n      this.state.gameData[rowIndex - 1][cellIndex] === 0\r\n    ) {\r\n      this.changeCoordinates(rowIndex - 1, cellIndex, rowIndex, cellIndex);\r\n    }\r\n  }\r\n\r\n  changeCoordinates(spaceRow, spaceCell, targetRow, targetCell) {\r\n    this.setState(state => {\r\n      let gameData = state.gameData;\r\n      gameData[spaceRow][spaceCell] = gameData[targetRow][targetCell];\r\n      gameData[targetRow][targetCell] = 0;\r\n      return {\r\n        gameData\r\n      };\r\n    });\r\n  }\r\n\r\n  isGameFinished() {\r\n    const currentState = this.state.gameData.reduce((a, b) => a.concat(b));\r\n    const initialState = this.state.initialGameData;\r\n    return initialState.every(function(row, index) {\r\n      return initialState[index] === currentState[index];\r\n    });\r\n  }\r\n\r\n  renderGameData() {\r\n    return this.state.gameData.map((row, index) => {\r\n      return (\r\n        <tr key={index}>\r\n          {row.map((cell, index, row) => {\r\n            return (\r\n              <td key={index} onClick={_ => this.onItemClick(row, index)}>\r\n                {cell !== 0 ? cell : \"\"}\r\n              </td>\r\n            );\r\n          })}\r\n        </tr>\r\n      );\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.isGameFinished() &&\r\n      this.state.gameStarted &&\r\n      !this.state.gameFinished\r\n    ) {\r\n      this.setState(_ => ({\r\n        gameFinished: true\r\n      }));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {!this.state.gameStarted && (\r\n          <StartMenu setGameDimension={this.setGameDimension} />\r\n        )}\r\n        {!this.state.gameFinished && this.state.gameStarted && (\r\n          <table>\r\n            <tbody>{this.renderGameData()}</tbody>\r\n          </table>\r\n        )}\r\n        {this.state.gameFinished && this.state.gameStarted && <WinnerMessage />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBody;","\nimport React from \"react\";\nimport GameBody from \"./GameBody\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GameBody />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}